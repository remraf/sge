#!/usr/bin/env bash
#
# name: wrap
# usage: qsub -pe openmp <SLOTS> -N <INPUT_FILE> <WRAPPER>
# description: wrapper script for sge job submissions using 
#              local scratch storage
#
#   1. Use NSLOTS placeholder rather than explicitly specifying
#      the number of slots.
#
#       Example(orca): 
#           %pal nprocs NSLOTS
#           end
#       Example(gaussian): 
#           %NProcShared=NSLOTS
#
#   2. Use AUX_INPUT/AUX_OUTPUT to add additional input/output
#      files with the indicated file extension.
#
#       Example(matlab):
#           AUX_INPUT=(m mat mex)
#
# author: tonyvo
# date: 2017-06-13
#
#$ -q all.q
#$ -cwd
#$ -S /bin/bash
#$ -e error.log
#$ -o output.log
# -m bea
# -M <email>
# -l h_rt=<hh>:<mm>:

INPUT="$JOB_NAME"
FILE="${INPUT%.*}"
EXTENSION="${INPUT#${FILE}.}"
SCRATCH="/scratch"

########## BEGIN USER CUSTOMIZATION ##########
 
AUX_INPUT=()                                      
AUX_OUTPUT=() 
BINARY=python
MODULES=(python/anaconda/3.5)
OUTPUT="${FILE}.out"

########### END USER CUSTOMIZATION ###########

#/*
#  
# FUNCTIONS
#
###*/

create_job_header() {
    ## create file with job metadata
    date +'%a %d %B %Y %H:%M:%S'
    echo -n "$JOB_ID "; hostname
    echo "$WORKING_DIR"
}

create_scratch() {
    ## create user scratch directory and populate with program files
    ([[ -d "$SCRATCH_DIR}" ]] || mkdir -p "$SCRATCH_DIR") &&
    ([[ -f "${SCRATCH_DIR}/${INPUT}" ]] || cp "$INPUT" "$SCRATCH_DIR") &&
    (
        sed -i "s/NSLOTS/${NSLOTS}/" "${SCRATCH_DIR}/${INPUT}";
        for EXTENSION in "${AUX_INPUT[@]}"; do
            cp "*.${EXTENSION}" "$SCRATCH_DIR" 2> /dev/null
        done
    )
}

load_module() {
    ## load required modules for computation
    source /etc/profile.d/modules.sh &&
    module load "${MODULES[@]}"
    PROGRAM=$(which $BINARY)
}

run_program() {
    ## run program to perform computations on data
    $PROGRAM ${SCRATCH_DIR}/${INPUT} > ${SCRATCH_DIR}/${OUTPUT}
}

save_output() {
    ## copy results from scratch to working directory & clean up scratch
    cp "${SCRATCH_DIR}/${OUTPUT}" "$WORKING_DIR"
    for EXTENSION in "${SCRATCH_DIR}/${AUX_OUTPUT[@]}"; do
        cp ${FILE}.${EXTENSION} $WORKING_DIR 2> /dev/null
    done

    ## clean up intermediate files
    rm -rf $SCRATCH_DIR
}

set_path() {
    ## define paths to scratch and working directory
    SCRATCH_DIR="${SCRATCH}/${USER}/${JOB_ID}"
    WORKING_DIR=$PWD
}

#/*
#
#   MAIN
#
###*/

load_module
set_path
create_job_header
create_scratch
run_program
save_output
