#!/usr/bin/env bash
#
# Usage: qsub -pe openmp <SLOTS> -N <INPUT_FILE> <WRAPPER>
# Description: wrapper script for sge job submission using 
#              local scratch storage. Output directed to 
#              <INPUT_FILE>.<OUTPUT_EXTENSION>
# Author: tony vo
# Date: 2017-06-13
#
#   1. Specify BINARY (e.g. matlab, g16, python)
#        Example R:
#
#   2. Specify modules
#        Example CP2K:
#           MODULES=(openmpi/3.1.3 cp2k/5.1)
# 
#   3. Specify OUTPUT_EXTENSION
#        Example STATA:
#           EXTENSION=smcl
#
#   4. Use NSLOTS placeholder rather than explicitly specifying
#      the number of slots. 
#        Example orca:
#           %pal nprocs NSLOTS
#           end
#        Example gaussian:
#           %NProcShared=NSLOTS
#
# Job Options:
#$ -q all.q
#$ -cwd
#$ -S /bin/bash
#$ -e error.log
#$ -o job.log
# -m bea
# -M <email>
# -l h_rt=<hh>:<mm>:

########## BEGIN USER CUSTOMIZATION ##########
 
BINARY=cp2k.popt
MODULES=(cp2k/5.1)
OUTPUT_EXTENSION=
PROGRAM_OPTIONS=""

########### END USER CUSTOMIZATION ###########

INPUT=$JOB_NAME
FILE="${INPUT%.*}"
FILE_EXTENSION="${INPUT#${FILE}.}"
OUTPUT="${FILE}.${OUTPUT_EXTENSION}"
SCRATCH=/scratch
SCRATCH_DIR="${SCRATCH}/${USER}/${JOB_ID}"
WORKING_DIR=$PWD


create_job_header() 
{
    ## create log with job metadata
    date +'%a %d %B %Y %H:%M:%S'
    echo "$JOB_ID $(hostname)"
    echo $WORKING_DIR
}

create_scratch() 
{
    ## create user scratch directory and populate with program files
    ([[ -d $SCRATCH_DIR ]] || mkdir -p $SCRATCH_DIR) &&
    echo -e "\n  ____ rsync _____"
    rsync -vPa ${WORKING_DIR}/ ${SCRATCH_DIR}/
}

load_module() 
{
    ## load required modules for computation
    source /etc/profile.d/modules.sh &&
    module load "${MODULES[@]}"
}

main()
{
    load_module
    create_job_header
    create_scratch
    run_program
    save_output 
}

run_program() 
{
    ## run program to perform computation on data
    cd $SCRATCH_DIR
    sed -i "s/NSLOTS/${NSLOTS}/" "${SCRATCH_DIR}/${INPUT}"
    $BINARY $PROGRAM_OPTIONS -o $OUTPUT $INPUT 
}

save_output() 
{
    ## copy results from scratch to working directory
    rsync -vPa --exclude $INPUT ${SCRATCH_DIR}/ ${WORKING_DIR}/

    ## clean up scratch files
    rm -rf $SCRATCH_DIR
}

main
